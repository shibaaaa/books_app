version: 2
jobs:
  build:
    parallelism: 3
    docker:
      - image: circleci/ruby:2.7.1-node-browsers
        environment:
          BUNDLER_VERSION: 2.1.4
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: books_app
          RAILS_ENV: test
      - image: circleci/postgres:12.3
        environment:
          POSTGRES_USER: books_app
          POSTGRES_DB: books_app_test
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - run:
          name: Update bundler
          command: gem update bundler

      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundle cache
      - restore_cache:
          keys:
            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-demo-bundle-v2-

      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache
      - save_cache:
          key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - restore_cache:
          keys:
            - yarn-cache-v1-{{ checksum "yarn.lock" }}
            - yarn-cache-v1-

      - run:
          name: Yarn Install
          command: yarn install --cache-folder ~/.cache/yarn

      - save_cache:
          key: yarn-cache-v1-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Database setup
          command: bundle exec rake db:schema:load --trace

      - run:
          name: Rails test
          command: |
            bin/rails test
            bin/rails test:system

      # Save test results for timing analysis
      - store_test_results:
          path: test_results
      # See https://circleci.com/docs/2.0/deployment-integrations/ for example deploy configs
